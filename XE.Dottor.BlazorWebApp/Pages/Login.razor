@page "/Login"
@layout FullLayout

@inject StateContainer Store
@inject NavigationManager NavigationManager
@inject XeAuthenticationStateProvider AuthStateProvider
@inject IApiProxyService Api

<div class="card mx-auto" style="width: 25rem;">
    <div class="card-body">
        <h5 class="card-title">Login</h5>

        <EditForm EditContext="loginEditContext" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="Username">Username:</label>
                <InputText @bind-Value="Model.Username" class="form-control" />
                <ValidationMessage For="() => Model.Username" />
            </div>

            <div class="form-group">
                <label for="Password">Password:</label>
                <InputTextOnInput type="password" @bind-Value="Model.Password" class="form-control" />
                <ValidationMessage For="() => Model.Password" />
            </div>


            <button type="submit" disabled="@isInvalid" class="btn btn-primary">Login</button>
            <NavLink href="" class="btn btn-secondary">Annulla</NavLink>
        </EditForm>
    </div>

</div>

<div class="alert alert-info mt-2" role="alert">
    <p>
        Utilizzare uno dei seguenti username e come password una qualsiasi testo più lungo di 5 caratteri
        <ul>
            <li>Bret</li>
            <li>Antonette</li>
            <li>Samantha</li>
            <li>Karianne</li>
        </ul>
    </p>
</div>

@code {

    private EditContext loginEditContext;
    private bool isInvalid = true;

    private LoginViewModel Model { get; set; } = new LoginViewModel();

    protected override void OnInitialized()
    {
        loginEditContext = new EditContext(Model);
        loginEditContext.OnFieldChanged += EditContext_OnFieldChanged;
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isInvalid = !loginEditContext.Validate();
    }

    private async Task HandleValidSubmit()
    {
        XeAuthenticationStateProvider.IsAuthenticating = true;

        // HACK: usato solo per simulare un'autenticazione
        //
        var user = await Api.GetUserAsync(Model.Username);
        if (user != null)
        {
            Store.CurrentUser = user;

            XeAuthenticationStateProvider.IsAuthenticating = false;
            XeAuthenticationStateProvider.IsAuthenticated = true;
            AuthStateProvider.NotifyAuthenticationStateChanged();
            NavigationManager.NavigateTo("/");
        }
    }

}
