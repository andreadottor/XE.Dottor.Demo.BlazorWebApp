@page "/"

@inject JSONPlaceholderApiProxyService Api
@inject JsFunctionService Js
@inject Store Store
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Elenco post</h3>

<input class="form-control" @bind="filterText" @bind:event="oninput" placeholder="Filtra per Tag" />

<hr />

@if (Store.Posts != null && Store.Posts.Any())
{
    @foreach (var p in filteredItems)
    {
        <Post Value="@p" OnTagClicked="TagClicked" />
    }
}
else
{
    <div class="alert alert-warning" role="alert">
        Nessun post presente
    </div>
}


<Loading Visible="Loading" />

@code {

    private IEnumerable<PostViewModel> filteredItems => string.IsNullOrEmpty(filterText) ? Store.Posts : Store.Posts.Where(p => p.Tags.Contains(filterText));
    private string filterText;
    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = state.User.Identity.Name;

        // leggo i dati dalle API
        //
        var list = await Api.GetPostList();
        // recupero le info aggiuntive fornite da una funzione JavaScript
        //
        var tempJsData = await Js.ReadInfo(userName);
        // faccio il merge dei dati in un unico ViewModel
        //
        Store.Posts = list.Select(p => new PostViewModel(p, tempJsData[p.Id]));
        Loading = false;
    }

    protected void TagClicked(string tag)
    {
        filterText = tag;
    }

}
