@page "/"

@inject IApiProxyService Api
@inject JsFunctionService Js
@inject StateContainer Store
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Elenco post</h3>

<input class="form-control" @bind="filterText" @bind:event="oninput" placeholder="Filtra per Tag" />

<hr />

@if (Store.Posts != null && Store.Posts.Any())
{
    @foreach (var post in filteredItems)
    {
        <Post Value="@post" OnTagClicked="TagClicked" />
    }
}
else
{
    <div class="alert alert-warning" role="alert">
        Nessun post presente
    </div>
}

<Loading Visible="Loading" />

@code {

    private IEnumerable<PostViewModel> filteredItems => string.IsNullOrEmpty(filterText) ? Store.Posts : Store.Posts.Where(p => p.Tags.Contains(filterText));
    private string filterText;
    private bool Loading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userName = "";
        IEnumerable<PostDto> list;


        // leggo i dati dalle API
        //
        if (!state.User.Identity.IsAuthenticated)
        {
            list = await Api.GetPostListAsync();
        }
        else
        {
            var userId = state.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            userName = state.User.Identity.Name;
            list = await Api.GetPostListAsync(int.Parse(userId));
        }

        // recupero le info aggiuntive fornite da una funzione JavaScript
        //
        var tempJsData = await Js.ReadInfo(userName);
        // faccio il merge dei dati in un unico ViewModel
        //
        Store.Posts = list.Select(p => new PostViewModel(p, tempJsData[p.Id]));
        Loading = false;
    }

    protected void TagClicked(string tag)
    {
        filterText = tag;
    }

}
